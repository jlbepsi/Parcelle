using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using LibraryUtilitaires;

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace ParcelleLibraryJSON.Gestions
{
    /*public class ElementAjouteEventArgs : EventArgs
    {
        // température lors de l'évt
        public int Compteur { get; set; }
        public int NbElements { get; set; }
        // constructeurs
        public ElementAjouteEventArgs() { }
        public ElementAjouteEventArgs(int compteur, int nbElements)
        {
            Compteur = compteur;
            NbElements = nbElements;
        }
    }*/

    public class GestionExploitants
    {
        private List<Exploitant> liste = new List<Exploitant>();
        private string configFile = null;

        public List<Exploitant> Liste
        {
            get { return liste; }
            set { liste = value; }
        }
        public string ConfigFile
        {
            get { return configFile; }
            set
            {
                configFile = value;
                ConfigurationManager.MAIN_CONFIG = configFile;

            }
        }

        public GestionExploitants()
        {
        }

        public void InitializeDummyData()
        {
            const int nbExploitants = 3; //30
            const int nbParcelles = 5; //20
            const int nbTraitements = 2; //50
            const int nbPulverisations = 2;

            int cptExploitants = 0, cptParcelles = 0, cptTraitements = 0, cptPulverisations = 0;
            // Remplissage avec des valeurs quelconques
            for (int i = 1; i <= nbExploitants; i++)
            {
                cptExploitants++;
                Exploitant e = new Exploitant(cptExploitants, "Dupont_" + cptExploitants);
                e.Telephone = "046700000" + cptExploitants;
                e.Mail = "Dupont_" + cptExploitants + "@foo.bar";

                for (int j = 1; j <= nbParcelles; j++)
                {
                    cptParcelles++;
                    Parcelle p = new Parcelle(cptParcelles, j*10, e);
                    p.Description = "PAR Desc" + j + "_" + i;
                    p.Emplacement = "PAR Emp" + j + "_" + i;
                    for (int k = 1; k <= nbTraitements; k++)
                    {
                        cptTraitements++;
                        TraitementEnChamp t = new TraitementEnChamp(cptTraitements);
                        t.Description = "TRAIT Desc" + j + "_" + i + "_" + k;
                        t.Parcelle = p;

                        for (int l = 1; l <= nbPulverisations; l++)
                        {
                            cptPulverisations++;
                            Pulverisation pl = new Pulverisation(cptPulverisations);
                            pl.Dosage = i * 14;
                            pl.Description = "PUL Desc" + j + "_" + i + "_" + k;
                            pl.Traitement = t;

                            t.AjouterPulverisation(pl);
                        }
                        p.AjouterTraitement(t);
                    }
                    cptTraitements++;
                    TraitementSemence ts = new TraitementSemence(cptTraitements);
                    ts.Description = "TRAIT Desc" + j + "_" + i + "_" + (nbPulverisations+1);
                    ts.Dosage = 10;
                    ts.Parcelle = p;
                    p.AjouterTraitement(ts);

                    e.AjouterParcelle(p);
                }
                liste.Add(e);
            }
        }

        #region Méthodes CRUD
        // Ajouter, lire, modifier, supprimer

        public void Ajouter(Exploitant e)
        {
            liste.Add(e);
        }

        public void Supprimer(int id)
        {
            foreach (Exploitant e in liste)
            {
                if (e.Id == id)
                {
                    liste.Remove(e);
                    return;
                }
            }
        }

        public Exploitant GetExploitant(int id)
        {
            return liste.Find(
                delegate(Exploitant e)
                {
                    return e.Id == id;
                }
            );
        }
        #endregion

        public void SerializeToJSON()
        {
            var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto, ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.All };

            try
            {
                string fileName = ConfigurationManager.GetConfigurationManager().GetValue("serialise.json.file");

                // Serialize objects
                using (StreamWriter sw = new StreamWriter(fileName))
                {
                    string output = JsonConvert.SerializeObject(this, settings);
                    sw.WriteLine(output);
                }
            }
            catch(Exception ex)
            {
                throw new ParcelleException(ex.Message);
            }
        }
        public void DeserializeFromJSON()
        {
            var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto, ReferenceLoopHandling = ReferenceLoopHandling.Serialize, PreserveReferencesHandling = PreserveReferencesHandling.All };
            
            try
            {
                string fileName = ConfigurationManager.GetConfigurationManager().GetValue("serialise.json.file");

                GestionExploitants gestion = (GestionExploitants)JsonConvert.DeserializeObject(File.ReadAllText(fileName), typeof(GestionExploitants), settings);
                this.liste = gestion.liste;

                // Il faut résoudre les références de chaque exploitant
                foreach(Exploitant exploitant in liste)
                {
                    exploitant.ResolveReferences();
                }
            }
            catch (Exception ex)
            {
                throw new ParcelleException(ex.Message);
            }
        }
    }
}
